/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package userInterface;

import Model.Formats;
import Model.Histogram;
import Model.ImageData;
import Model.ImageDataByChannels;
import Model.ImageDataCMY;
import Model.ImageReader;
import OperateImages.ImageTransform;
import OperateImages.LookUpTable;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Container;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import javax.swing.JDesktopPane;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import static javax.swing.JOptionPane.showMessageDialog;
import javax.swing.JPanel;
import javax.swing.UIManager;

/**
 *
 * @author tony
 */
public class app extends javax.swing.JFrame {

    public Window currentWindow;
    public int cst;
    private Show showContent;
    /**
     * Creates new form app
     */
    public app() {
        initComponents();
        this.setSize(1280, 770);
        showContent = new Show(this, this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        jPopupMenu2 = new javax.swing.JPopupMenu();
        jPopupMenu3 = new javax.swing.JPopupMenu();
        jMenuItem17 = new javax.swing.JMenuItem();
        jDialog1 = new javax.swing.JDialog();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();
        jDesktopPane1 = new javax.swing.JDesktopPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem22 = new javax.swing.JMenuItem();
        jMenuItem23 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem12 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem13 = new javax.swing.JMenuItem();
        jMenuItem14 = new javax.swing.JMenuItem();
        jMenuItem15 = new javax.swing.JMenuItem();
        jMenuItem16 = new javax.swing.JMenuItem();
        jMenuItem25 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem18 = new javax.swing.JMenuItem();
        jMenuItem19 = new javax.swing.JMenuItem();
        jMenuItem20 = new javax.swing.JMenuItem();
        jMenuItem21 = new javax.swing.JMenuItem();
        jMenuItem26 = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenu6 = new javax.swing.JMenu();
        jMenuItem24 = new javax.swing.JMenuItem();
        jMenuItem27 = new javax.swing.JMenuItem();
        jMenu7 = new javax.swing.JMenu();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenu8 = new javax.swing.JMenu();
        jMenuItem28 = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        jMenuItem29 = new javax.swing.JMenuItem();
        jMenuItem30 = new javax.swing.JMenuItem();

        jMenuItem6.setText("jMenuItem6");

        jMenuItem7.setText("jMenuItem7");

        jMenuItem17.setText("jMenuItem17");

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        jMenuItem9.setText("jMenuItem9");

        jMenuItem11.setText("jMenuItem11");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jDesktopPane1.setForeground(new java.awt.Color(0, 174, 175));

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 581, Short.MAX_VALUE)
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 427, Short.MAX_VALUE)
        );

        jMenuBar1.setBackground(new java.awt.Color(155, 136, 155));
        jMenuBar1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(51, 0, 204), new java.awt.Color(204, 0, 0), new java.awt.Color(255, 102, 102), new java.awt.Color(102, 0, 102)));
        jMenuBar1.setForeground(new java.awt.Color(102, 0, 102));

        jMenu1.setText("File");

        jMenuItem1.setText("Abrir imagen");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        jMenu3.setText("Opciones");

        jMenuItem2.setText("Escala grises");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem2);

        jMenuItem3.setText("Separar RGB");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem3);

        jMenuItem22.setText("Separar RGB en gris");
        jMenuItem22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem22ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem22);

        jMenuItem23.setText("Separar CMY");
        jMenuItem23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem23ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem23);

        jMenuItem4.setText("Obtener Histograma");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem4);

        jMenuItem5.setText("hacer chica");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem5);

        jMenuBar1.add(jMenu3);

        jMenu4.setText("Histograma");

        jMenuItem12.setText("todos Histogramas");
        jMenuItem12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem12ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem12);

        jMenuItem8.setText("Histograma");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem8);

        jMenuBar1.add(jMenu4);

        jMenu5.setText("Formato");

        jMenuItem13.setText("rgb to cmy");
        jMenuItem13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem13ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem13);

        jMenuItem14.setText("rgb to yiq");
        jMenuItem14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem14ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem14);

        jMenuItem15.setText("rgb to his");
        jMenuItem15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem15ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem15);

        jMenuItem16.setText("rgb to hsv");
        jMenuItem16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem16ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem16);

        jMenuItem25.setText("rgb to lab");
        jMenuItem25.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem25ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem25);
        jMenu5.add(jSeparator1);

        jMenuItem18.setText("cmy to rgb");
        jMenuItem18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem18ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem18);

        jMenuItem19.setText("yiq to rgb");
        jMenuItem19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem19ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem19);

        jMenuItem20.setText("his to rgb");
        jMenuItem20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem20ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem20);

        jMenuItem21.setText("hsv to rgb");
        jMenuItem21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem21ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem21);

        jMenuItem26.setText("lab to rgb");
        jMenuItem26.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem26ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem26);
        jMenu5.add(jSeparator2);

        jMenuBar1.add(jMenu5);

        jMenu6.setText("Operaciones");
        jMenu6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu6ActionPerformed(evt);
            }
        });

        jMenuItem24.setText("Operaciones entre imagenes");
        jMenuItem24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem24ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem24);

        jMenuItem27.setText("Transformaciones de imagen");
        jMenuItem27.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem27ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem27);

        jMenuBar1.add(jMenu6);

        jMenu7.setText("Ecualizacion");

        jMenuItem10.setText("Ecualizar");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu7.add(jMenuItem10);

        jMenuBar1.add(jMenu7);

        jMenu8.setText("Filtros");

        jMenuItem28.setText("Lineales");
        jMenuItem28.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem28ActionPerformed(evt);
            }
        });
        jMenu8.add(jMenuItem28);
        jMenu8.add(jSeparator3);

        jMenuItem29.setText("No lineales");
        jMenuItem29.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem29ActionPerformed(evt);
            }
        });
        jMenu8.add(jMenuItem29);

        jMenuItem30.setText("Ruido");
        jMenuItem30.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem30ActionPerformed(evt);
            }
        });
        jMenu8.add(jMenuItem30);

        jMenuBar1.add(jMenu8);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
//        JFileChooser fileChooser = new JFileChooser("/Users/tony/imagenes/");
        JFileChooser fileChooser = new JFileChooser();

        switch (fileChooser.showOpenDialog(this)) {
            case JFileChooser.APPROVE_OPTION:
                String fileName = fileChooser.getSelectedFile().getName();
                String path = fileChooser.getSelectedFile().getAbsolutePath();

                ImageReader ir = new ImageReader(path, fileName);
                ImageData id = new ImageData(ir.getPixels());
                id.format = Formats.rgb;
                Window window = new Window(id, fileName);

                setUpWindow(window);
                break;
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // separar rgb
        System.out.println("Separar rgb");
        String names[] = {"_red", "_green", "_blue"};

        for (int i = 0; i < 3; i++) {
            ImageDataByChannels rgbImage = new ImageDataByChannels(currentWindow.getId(), i);
            Window window = new Window(rgbImage, currentWindow.getFileName() + names[i]);
            window.setImage2show(rgbImage.getImage());

            setUpWindow(window);

        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        System.out.println("histograma");
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // ESCALA GRISES
        System.out.println("Escala grises");
        Window window = new Window(currentWindow.getId().toGrayScale(), currentWindow.getFileName() + "_gray");

        setUpWindow(window);

    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // HACER CHICHA
//        .getScaledInstance(200, 200, Image.SCALE_DEFAULT)
        Window window = new Window(currentWindow.getId(), currentWindow.getFileName() + "_chica");
        window.setImage2show(currentWindow.getImage2show().getScaledInstance(350, 350, Image.SCALE_DEFAULT));
        setUpWindow(window);


    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem12ActionPerformed
        // TODO add your handling code here:
        //Histogramas todos
        Color[] colors = {Color.red, Color.green, Color.blue, Color.gray};
        HistogramPanel[] histogramPanels = new HistogramPanel[8];
        Histogram[] histos = new Histogram[4];
        ImageData grayImage = currentWindow.getId().toGrayScale();

        for (int i = 0; i < 3; i++) {
            histos[i] = new Histogram(currentWindow.getId().getChannelInt(i));
        }
        histos[3] = new Histogram(grayImage.getChannelInt(0));
        for (int i = 0; i < 8; i++) {
            histogramPanels[i] = new HistogramPanel(histos[i % 4], colors[i % 4], 3 + (int) (i / 4));
        }

        JFrame viewHistos = new JFrame(currentWindow.fileName + "_histogramas");

        viewHistos.add(histogramPanels[0]);
        viewHistos.add(histogramPanels[1]);
        viewHistos.add(histogramPanels[2]);
        viewHistos.add(histogramPanels[3]);
        viewHistos.add(histogramPanels[4]);
        viewHistos.add(histogramPanels[5]);
        viewHistos.add(histogramPanels[6]);
        viewHistos.add(histogramPanels[7]);

        viewHistos.setLayout(new GridLayout(2, 4));

        viewHistos.setSize(1200, 400);
        viewHistos.setVisible(true);
//        System.out.println(histos[3]);
    }//GEN-LAST:event_jMenuItem12ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        // TODO add your handling code here:
        Color[] colors = {Color.red, Color.GREEN, Color.blue};
        for (int i = 0; i < 3; i++) {
            Histogram histo = new Histogram(currentWindow.getId().getChannelInt(i));
            HistogramFrame frameHisto = new HistogramFrame(histo, colors[i], 1, currentWindow.getFileName());
            HistogramFrame frameHistoAcum = new HistogramFrame(histo, colors[i], 2, currentWindow.getFileName());
        }

//        System.out.println(histo);

    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem20ActionPerformed
        // HIS TO RGB
        if (currentWindow.getId().getFormat() != Formats.hsi) {
            showMessageDialog(rootPane, "La imagen debe estar en " + Formats.names[Formats.hsi]);
            return;
        }
        format2rgb();
    }//GEN-LAST:event_jMenuItem20ActionPerformed

    private void jMenuItem21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem21ActionPerformed
        // HSV TO RGB
        if (currentWindow.getId().getFormat() != Formats.hsv) {
            showMessageDialog(rootPane, "La imagen debe estar en " + Formats.names[Formats.hsv]);
            return;
        }
        format2rgb();
    }//GEN-LAST:event_jMenuItem21ActionPerformed

    private void jMenuItem13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem13ActionPerformed
        // RGB TO CMY
        convertir2format(Formats.cmy);
    }//GEN-LAST:event_jMenuItem13ActionPerformed

    private void jMenuItem14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem14ActionPerformed
        // RGB TO YIQ
        convertir2format(Formats.yiq);
    }//GEN-LAST:event_jMenuItem14ActionPerformed

    private void jMenuItem15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem15ActionPerformed
        // RGB TO HIS
        convertir2format(Formats.hsi);
    }//GEN-LAST:event_jMenuItem15ActionPerformed

    private void jMenuItem16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem16ActionPerformed
        // RGB TO HSV
        convertir2format(Formats.hsv);

    }//GEN-LAST:event_jMenuItem16ActionPerformed

    private void jMenuItem18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem18ActionPerformed
        // CMY TO RGB
        if (currentWindow.getId().getFormat() != Formats.cmy) {
            showMessageDialog(rootPane, "La imagen debe estar en " + Formats.names[Formats.cmy]);
            return;
        }
        format2rgb();

    }//GEN-LAST:event_jMenuItem18ActionPerformed

    private void jMenuItem19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem19ActionPerformed
        // YIQ TO RGB
        if (currentWindow.getId().getFormat() != Formats.yiq) {
            System.out.println("FORMATO = " + currentWindow.getId().getFormat());
            showMessageDialog(rootPane, "La imagen debe estar en " + Formats.names[Formats.yiq]);
            return;
        }
        format2rgb();
    }//GEN-LAST:event_jMenuItem19ActionPerformed

    private void jMenuItem22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem22ActionPerformed
        // SEPARAR RGB EN GRIS 
        System.out.println("Separar rgb");
        String names[] = {"_red", "_green", "_blue"};

        for (int i = 0; i < 3; i++) {
            ImageDataByChannels rgbImage = new ImageDataByChannels(currentWindow.getId(), i);
            Window window = new Window(rgbImage, currentWindow.getFileName() + names[i]);
            window.setImage2show(rgbImage.getImageGray());

            setUpWindow(window);

        }

    }//GEN-LAST:event_jMenuItem22ActionPerformed

    private void jMenuItem23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem23ActionPerformed
        // Separar CMY
        String names[] = {"_cyan", "_magenta", "_yellow"};
        if (currentWindow.getId().format != Formats.cmy) {
            showMessageDialog(null, "la imagen debe estar en CMY");
            return;
        }

        for (int i = 0; i < 3; i++) {
            ImageDataByChannels cmyImage = new ImageDataByChannels(currentWindow.getId(), i);
            Window window = new Window(cmyImage, currentWindow.getFileName() + names[i]);
            window.setImage2show(cmyImage.getImage());

            setUpWindow(window);

        }


    }//GEN-LAST:event_jMenuItem23ActionPerformed

    private void jMenu6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu6ActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_jMenu6ActionPerformed

    private void jMenuItem24ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem24ActionPerformed
        // TODO add your handling code here:
        OperateImage oi = new OperateImage();
//        showMessageDialog(null, "le di cick");
    }//GEN-LAST:event_jMenuItem24ActionPerformed

    private void jMenuItem25ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem25ActionPerformed
        // RGB TO LAB
        convertir2format(Formats.lab);
    }//GEN-LAST:event_jMenuItem25ActionPerformed

    private void jMenuItem26ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem26ActionPerformed
        // LAB TO RGB
        if (currentWindow.getId().getFormat() != Formats.lab) {
            showMessageDialog(rootPane, "La imagen debe estar en " + Formats.names[Formats.lab]);
            return;
        }
        format2rgb();

    }//GEN-LAST:event_jMenuItem26ActionPerformed

    private void jMenuItem27ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem27ActionPerformed
        // TODO add your handling code here:
        
        

        //aqui acaba ========= 
        Umbral umbral;
        JDesktopPane copia[] = {this.jDesktopPane1};
        Window copiaWindo[] = {currentWindow};
        
        umbral = new Umbral(this);
       
        umbral.setVisible(true);

    }//GEN-LAST:event_jMenuItem27ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        // Ecualizacion Menu Ecualizar
        if(currentWindow.getId().format == Formats.rgb){
            showMessageDialog(rootPane, "La imagen debe estar separada en algun canal para ser procesada, por ejemplo YIQ o HIS");
            return;
        }
        JDesktopPane copia[] = {this.jDesktopPane1};
        Window copiaWindo[] = {currentWindow};
        Ecualizar ec = new Ecualizar(this);
        System.out.println("SE IMPRIME AL INSTANTE ? ");
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void jMenuItem28ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem28ActionPerformed
        // Filtros Lineales
        if(currentWindow.getId().format == Formats.rgb){
            showMessageDialog(rootPane, "La imagen debe estar separada en algun canal para ser procesada, por ejemplo YIQ o HIS");
            return;
        }
        FiltrosLineales fl = new FiltrosLineales(this);
    }//GEN-LAST:event_jMenuItem28ActionPerformed

    private void jMenuItem29ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem29ActionPerformed
        //Filtros no lineales
        if(currentWindow.getId().format == Formats.rgb){
            showMessageDialog(rootPane, "La imagen debe estar separada en algun canal para ser procesada, por ejemplo YIQ o HIS");
            return;
        }
        FiltroNoLineal fnl = new FiltroNoLineal(this);
    }//GEN-LAST:event_jMenuItem29ActionPerformed

    private void jMenuItem30ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem30ActionPerformed
        // RuidoInterfaz
        if(currentWindow.getId().format == Formats.rgb){
            showMessageDialog(rootPane, "La imagen debe estar separada en algun canal para ser procesada, por ejemplo YIQ o HIS");
            return;
        }
        RuidoInterfaz ruido = new RuidoInterfaz(this);
    }//GEN-LAST:event_jMenuItem30ActionPerformed

    public void convertir2format(int format) {

        if (currentWindow.getId().getFormat() != Formats.rgb) {
            showMessageDialog(null, "la imagen debe estar en rgb para transformarla :c");
            return;
        }

        ImageData formatImage = currentWindow.getId().rgb2format(format);
//        System.out.println(formatImage);
        Window formatWindow = new Window(formatImage, currentWindow.fileName + Formats.names[format]);
        setUpWindow(formatWindow);

        for (int i = 0; i < 3; i++) {
            ImageDataByChannels channelImage = new ImageDataByChannels(formatImage, i);
            Window channelWindow = new Window(channelImage, currentWindow.fileName + Formats.channelNames[format][i]);
            channelWindow.setImage2show(channelImage.getImageGray());

            setUpWindow(channelWindow);
        }

    }

    

    public void format2rgb() {
        ImageData rgbImage = currentWindow.getId().format2rgb();
        Window window = new Window(rgbImage, currentWindow.getFileName() + "_rgb");
        setUpWindow(window);
    }
    
    public void setUpWindow(Window window) {
        showContent.setUpWindow(window);
    }
    
    public void validar(){
    
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(app.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(app.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(app.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(app.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
       
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new app().setVisible(true);
            }
        });
    }

    public JDesktopPane getjDesktopPane1() {
        return jDesktopPane1;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenu jMenu8;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem14;
    private javax.swing.JMenuItem jMenuItem15;
    private javax.swing.JMenuItem jMenuItem16;
    private javax.swing.JMenuItem jMenuItem17;
    private javax.swing.JMenuItem jMenuItem18;
    private javax.swing.JMenuItem jMenuItem19;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem20;
    private javax.swing.JMenuItem jMenuItem21;
    private javax.swing.JMenuItem jMenuItem22;
    private javax.swing.JMenuItem jMenuItem23;
    private javax.swing.JMenuItem jMenuItem24;
    private javax.swing.JMenuItem jMenuItem25;
    private javax.swing.JMenuItem jMenuItem26;
    private javax.swing.JMenuItem jMenuItem27;
    private javax.swing.JMenuItem jMenuItem28;
    private javax.swing.JMenuItem jMenuItem29;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem30;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JPopupMenu jPopupMenu2;
    private javax.swing.JPopupMenu jPopupMenu3;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    // End of variables declaration//GEN-END:variables
}
